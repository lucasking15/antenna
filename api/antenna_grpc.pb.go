// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.0
// source: api/antenna.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntennaClient is the client API for Antenna service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntennaClient interface {
	ListAntenna(ctx context.Context, in *ListAntennaRequest, opts ...grpc.CallOption) (*ListAntennaReply, error)
}

type antennaClient struct {
	cc grpc.ClientConnInterface
}

func NewAntennaClient(cc grpc.ClientConnInterface) AntennaClient {
	return &antennaClient{cc}
}

func (c *antennaClient) ListAntenna(ctx context.Context, in *ListAntennaRequest, opts ...grpc.CallOption) (*ListAntennaReply, error) {
	out := new(ListAntennaReply)
	err := c.cc.Invoke(ctx, "/api.Antenna/ListAntenna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntennaServer is the server API for Antenna service.
// All implementations must embed UnimplementedAntennaServer
// for forward compatibility
type AntennaServer interface {
	ListAntenna(context.Context, *ListAntennaRequest) (*ListAntennaReply, error)
	mustEmbedUnimplementedAntennaServer()
}

// UnimplementedAntennaServer must be embedded to have forward compatible implementations.
type UnimplementedAntennaServer struct {
}

func (UnimplementedAntennaServer) ListAntenna(context.Context, *ListAntennaRequest) (*ListAntennaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAntenna not implemented")
}
func (UnimplementedAntennaServer) mustEmbedUnimplementedAntennaServer() {}

// UnsafeAntennaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntennaServer will
// result in compilation errors.
type UnsafeAntennaServer interface {
	mustEmbedUnimplementedAntennaServer()
}

func RegisterAntennaServer(s grpc.ServiceRegistrar, srv AntennaServer) {
	s.RegisterService(&Antenna_ServiceDesc, srv)
}

func _Antenna_ListAntenna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAntennaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntennaServer).ListAntenna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Antenna/ListAntenna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntennaServer).ListAntenna(ctx, req.(*ListAntennaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Antenna_ServiceDesc is the grpc.ServiceDesc for Antenna service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Antenna_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Antenna",
	HandlerType: (*AntennaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAntenna",
			Handler:    _Antenna_ListAntenna_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/antenna.proto",
}
